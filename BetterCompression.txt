import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'betterCompression' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */

    public static String betterCompression(String s) {
        char[] str = s.toCharArray();
        int[] map = new int[26];
        int i = 0;
        int n = s.length();
        while (i < n) {
            char ch = str[i];
            if (ch >= 'a' && ch <= 'z') {
                int start = i + 1;
                int end = start;
                while (end < n && (str[end] >= '0' && str[end] <= '9')) {
                    end++;
                }

                int count = Integer.parseInt(s.substring(start, end));

                map[ch - 'a'] += count;
                i = end;
            } else {
                i++;
            }
        }

        StringBuilder sb = new StringBuilder();
        for (char ch = 'a'; ch <= 'z'; ch++) {
            if (map[ch - 'a'] > 0) {
                sb.append(ch);
                sb.append(map[ch - 'a']);
            }
        }

        return sb.toString();
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        String result = Result.betterCompression(s);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
